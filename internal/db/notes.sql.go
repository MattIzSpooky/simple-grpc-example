// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: notes.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (description)
VALUES ($1)
    RETURNING id, description, created, updated
`

func (q *Queries) CreateNote(ctx context.Context, description string) (Note, error) {
	row := q.queryRow(ctx, q.createNoteStmt, createNote, description)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteNoteByID = `-- name: DeleteNoteByID :exec
DELETE FROM notes WHERE id = $1
`

func (q *Queries) DeleteNoteByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteNoteByIDStmt, deleteNoteByID, id)
	return err
}

const getAllNotes = `-- name: GetAllNotes :many
SELECT id, description, created, updated
FROM notes
ORDER BY created DESC
`

func (q *Queries) GetAllNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.query(ctx, q.getAllNotesStmt, getAllNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNoteByID = `-- name: GetNoteByID :one
SELECT id, description, created, updated FROM notes WHERE id = $1
`

func (q *Queries) GetNoteByID(ctx context.Context, id uuid.UUID) (Note, error) {
	row := q.queryRow(ctx, q.getNoteByIDStmt, getNoteByID, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateNoteByID = `-- name: UpdateNoteByID :one
UPDATE notes
SET description = $2, updated = now()
WHERE id = $1
    RETURNING id, description, created, updated
`

type UpdateNoteByIDParams struct {
	ID          uuid.UUID `json:"id"`
	Description string    `json:"description"`
}

func (q *Queries) UpdateNoteByID(ctx context.Context, arg UpdateNoteByIDParams) (Note, error) {
	row := q.queryRow(ctx, q.updateNoteByIDStmt, updateNoteByID, arg.ID, arg.Description)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
